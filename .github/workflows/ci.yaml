# # This is for CD
# name: CI
# on:
#   pull_request:
#     branches:
#       - main
#   push:
#     branches:
#       - main

# jobs:
#   build-and-test:
#     name: Build the project
#     runs-on: ubuntu-latest
#     # if github.event_name="pull_request"
#     steps:
#       - uses: actions/checkout@v3
#       - name: Install dependencies
#         run: npm ci
#       - name: Run eslint
#         run: npm run lint:fix
#       - name: Test and Coverage
#         run: npm run test
#         env:
#           DB_HOST: ${{secrets.TEST_DB_HOST}}
#           DB_PORT: ${{secrets.TEST_DB_PORT}}
#           DB_USERNAME: ${{secrets.TEST_DB_USERNAME}}
#           DB_PASSWORD: ${{secrets.TEST_DB_PASSWORD}}
#           DB_NAME: ${{secrets.TEST_DB_NAME}}
#           REFRESH_TOKEN_SECRET: ${{secrets.REFRESH_TOKEN_SECRET}}
#           JWKS_URI: ${{secrets.JWKS_URI}}
#           PRIVATE_KEY: ${{secrets.PRIVATE_KEY}}
#       - name: Build-ts
#         run: npm run build
#       - name: Sonar Cloud scan
#         uses: SonarSource/sonarcloud-github-action@master
#         env:
#           GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
#           SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
#   build-and-push-docker:
#     name: Build and pushed docker image
#     needs: build-and-test
#     runs-on: ubuntu-latest
#     env:
#       IMAGE_NAME: panda747767328/Auth-service
#       IMAGE_TAG: build-${{github.run_number}}
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3
#       - name: Login to docker hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{secrets.DOCKERHUB_USERNAME}}
#           password: ${{secrets.DOCKERHUB_PASSWORD}}
#       - name: Build docker image
#         run: docker build -t ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} -f docker/prod/Dockerfile .
#       - name: push docker image to docker hub
#         run: docker push ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}

name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test the Project
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Tests and Coverage
        run: npm run test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: test_user
          DB_PASSWORD: test_pass
          DB_NAME: test_db
          REFRESH_TOKEN_SECRET: test_refresh_secret
          JWKS_URI: https://example.com/.well-known/jwks.json
          PRIVATE_KEY: dummy_private_key

      - name: Build TypeScript
        run: npm run build

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-push-docker:
    name: Build and Push Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      IMAGE_NAME: panda747767328/Auth-service
      IMAGE_TAG: build-${{ github.run_number }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -f docker/prod/Dockerfile .

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
